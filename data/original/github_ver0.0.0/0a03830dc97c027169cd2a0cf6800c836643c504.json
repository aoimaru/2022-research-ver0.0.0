[
    {
        "type": "DOCKER-FROM",
        "children": [
            {
                "type": "DOCKER-IMAGE-NAME",
                "value": "windowsservercore",
                "children": []
            },
            {
                "type": "DOCKER-IMAGE-REPO",
                "value": "microsoft",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-SHELL",
        "children": [
            {
                "type": "DOCKER-SHELL-EXECUTABLE",
                "value": "powershell",
                "children": []
            },
            {
                "type": "DOCKER-SHELL-ARG",
                "value": "-Command",
                "children": []
            },
            {
                "type": "DOCKER-SHELL-ARG",
                "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "GO_VERSION",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "1.8.1",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "GIT_VERSION",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "2.11.1",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "GOPATH",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "C:\\go",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "FROM_DOCKERFILE",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "1",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "Function Test-Nano() {     $EditionId = (Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion' -Name 'EditionID').EditionId;     return (($EditionId -eq 'ServerStandardNano') -or ($EditionId -eq 'ServerDataCenterNano') -or ($EditionId -eq 'NanoServer'));   }    Function Download-File([string] $source, [string] $target) {     if (Test-Nano) {       $handler = New-Object System.Net.Http.HttpClientHandler;       $client = New-Object System.Net.Http.HttpClient($handler);       $client.Timeout = New-Object System.TimeSpan(0, 30, 0);       $cancelTokenSource = [System.Threading.CancellationTokenSource]::new();       $responseMsg = $client.GetAsync([System.Uri]::new($source), $cancelTokenSource.Token);       $responseMsg.Wait();       if (!$responseMsg.IsCanceled) {         $response = $responseMsg.Result;         if ($response.IsSuccessStatusCode) {           $downloadedFileStream = [System.IO.FileStream]::new($target, [System.IO.FileMode]::Create, [System.IO.FileAccess]::Write);           $copyStreamOp = $response.Content.CopyToAsync($downloadedFileStream);           $copyStreamOp.Wait();           $downloadedFileStream.Close();           if ($copyStreamOp.Exception -ne $null) { throw $copyStreamOp.Exception }         }       } else {       Throw (\"Failed to download \" + $source)       }    } else {       $webClient = New-Object System.Net.WebClient;       $webClient.DownloadFile($source, $target);     }   }     setx /M PATH $('C:\\git\\cmd;C:\\git\\usr\\bin;'+$Env:PATH+';C:\\gcc\\bin;C:\\go\\bin');     Write-Host INFO: Downloading git...;   $location='https://www.nuget.org/api/v2/package/GitForWindows/'+$Env:GIT_VERSION;   Download-File $location C:\\gitsetup.zip;     Write-Host INFO: Downloading go...;   Download-File $('https://golang.org/dl/go'+$Env:GO_VERSION+'.windows-amd64.zip') C:\\go.zip;     Write-Host INFO: Downloading compiler 1 of 3...;   Download-File https://raw.githubusercontent.com/jhowardmsft/docker-tdmgcc/master/gcc.zip C:\\gcc.zip;     Write-Host INFO: Downloading compiler 2 of 3...;   Download-File https://raw.githubusercontent.com/jhowardmsft/docker-tdmgcc/master/runtime.zip C:\\runtime.zip;     Write-Host INFO: Downloading compiler 3 of 3...;   Download-File https://raw.githubusercontent.com/jhowardmsft/docker-tdmgcc/master/binutils.zip C:\\binutils.zip;     Write-Host INFO: Extracting git...;   Expand-Archive C:\\gitsetup.zip C:\\git-tmp;   New-Item -Type Directory C:\\git | Out-Null;   Move-Item C:\\git-tmp\\tools\\* C:\\git\\.;   Remove-Item -Recurse -Force C:\\git-tmp;     Write-Host INFO: Expanding go...;   Expand-Archive C:\\go.zip -DestinationPath C:\\;     Write-Host INFO: Expanding compiler 1 of 3...;   Expand-Archive C:\\gcc.zip -DestinationPath C:\\gcc -Force;   Write-Host INFO: Expanding compiler 2 of 3...;   Expand-Archive C:\\runtime.zip -DestinationPath C:\\gcc -Force;   Write-Host INFO: Expanding compiler 3 of 3...;   Expand-Archive C:\\binutils.zip -DestinationPath C:\\gcc -Force;     Write-Host INFO: Removing downloaded files...;   Remove-Item C:\\gcc.zip;   Remove-Item C:\\runtime.zip;   Remove-Item C:\\binutils.zip;   Remove-Item C:\\gitsetup.zip;     Write-Host INFO: Creating source directory...;   New-Item -ItemType Directory -Path C:\\go\\src\\github.com\\docker\\docker | Out-Null;     Write-Host INFO: Configuring git core.autocrlf...;   C:\\git\\cmd\\git config --global core.autocrlf true;     Write-Host INFO: Completed",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENTRYPOINT",
        "children": [
            {
                "type": "DOCKER-ENTRYPOINT-EXECUTABLE",
                "value": "powershell.exe",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-WORKDIR",
        "children": [
            {
                "type": "DOCKER-PATH",
                "value": "C:\\go\\src\\github.com\\docker\\docker",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-COPY",
        "children": [
            {
                "type": "DOCKER-COPY-TARGET",
                "children": [
                    {
                        "type": "DOCKER-PATH",
                        "value": ".",
                        "children": []
                    }
                ]
            },
            {
                "type": "DOCKER-COPY-SOURCE",
                "children": [
                    {
                        "type": "DOCKER-PATH",
                        "value": ".",
                        "children": []
                    }
                ]
            }
        ]
    }
]