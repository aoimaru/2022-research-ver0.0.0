[
    {
        "type": "DOCKER-FROM",
        "children": [
            {
                "type": "DOCKER-IMAGE-NAME",
                "value": "alpine",
                "children": []
            },
            {
                "type": "DOCKER-IMAGE-TAG",
                "value": "3.10",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "apk add --no-cache \t\tbzip2 \t\tcoreutils \t\tcurl \t\tgcc \t\tgnupg \t\tlinux-headers \t\tmake \t\tmusl-dev \t\ttzdata",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "BUSYBOX_VERSION",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "1.31.0",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \ttarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\"; \tcurl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\"; \tcurl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\"; \tgpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; \tmkdir -p /usr/src/busybox; \ttar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; \trm busybox.tar.bz2*",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-WORKDIR",
        "children": [
            {
                "type": "DOCKER-PATH",
                "value": "/usr/src/busybox",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "sed -i 's/^struct kconf_id \\*$/static &/g' scripts/kconfig/zconf.hash.c_shipped",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \t\tsetConfs=' \t\tCONFIG_AR=y \t\tCONFIG_FEATURE_AR_CREATE=y \t\tCONFIG_FEATURE_AR_LONG_FILENAMES=y \t\tCONFIG_LAST_SUPPORTED_WCHAR=0 \t\tCONFIG_STATIC=y \t'; \t\tunsetConfs=' \t\tCONFIG_FEATURE_SYNC_FANCY \t\t\t\tCONFIG_FEATURE_HAVE_RPC \t\tCONFIG_FEATURE_INETD_RPC \t\tCONFIG_FEATURE_UTMP \t\tCONFIG_FEATURE_WTMP \t'; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex \t&& make -j \"$(nproc)\" \t\tbusybox \t&& ./busybox --help \t&& mkdir -p rootfs/bin \t&& ln -vL busybox rootfs/bin/ \t&& chroot rootfs /bin/busybox --install /bin",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -x \t&& aportsVersion=\"v$(cat /etc/alpine-release)\" \t&& curl -fsSL \t\t\"https://git.alpinelinux.org/cgit/aports/plain/main/musl/getconf.c?h=${aportsVersion}\" \t\t-o /usr/src/getconf.c \t&& gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c \t&& chroot rootfs /bin/getconf _NPROCESSORS_ONLN",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \tbuildrootVersion='2019.05'; \tmkdir -p rootfs/etc; \tfor f in passwd shadow group; do \t\tcurl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\"; \tdone; \tgrep -E '^root::' rootfs/etc/shadow; \tsed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; \tgrep -E '^root:[*]:' rootfs/etc/shadow; \tcurl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\"; \tawk ' \t\t!/^#/ { \t\t\tif ($2 != \"d\" && $2 != \"f\") { \t\t\t\tprintf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; \t\t\t\texit 1; \t\t\t} \t\t\tsub(/^\\/?/, \"rootfs/\", $1); \t\t\tif ($2 == \"d\") { \t\t\t\tprintf \"mkdir -p %s\\n\", $1; \t\t\t} \t\t\tprintf \"chmod %s %s\\n\", $3, $1; \t\t} \t' buildroot-device-table.txt | sh -eux; \trm buildroot-device-table.txt",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex \t&& cd rootfs \t&& for userHome in $(awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd); do \t\tuser=\"${userHome%%=*}\"; \t\thome=\"${userHome#*=}\"; \t\thome=\"./${home#/}\"; \t\tif [ ! -d \"$home\" ]; then \t\t\tmkdir -p \"$home\"; \t\t\tchown \"$user\" \"$home\"; \t\t\tchmod 755 \"$home\"; \t\tfi; \tdone",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "chroot rootfs /bin/sh -xec 'true'",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \tln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; \t[ \"$(chroot rootfs date +%Z)\" = 'UTC' ]",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "cp -L /etc/resolv.conf rootfs/etc/ \t&& chroot rootfs /bin/sh -xec 'nslookup google.com' \t&& rm rootfs/etc/resolv.conf",
                "children": []
            }
        ]
    }
]