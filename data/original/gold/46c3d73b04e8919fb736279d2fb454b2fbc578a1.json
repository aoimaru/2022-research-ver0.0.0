[
    {
        "type": "DOCKER-FROM",
        "children": [
            {
                "type": "DOCKER-IMAGE-NAME",
                "value": "debian",
                "children": []
            },
            {
                "type": "DOCKER-IMAGE-TAG",
                "value": "stretch-slim",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "apt-get update && apt-get install -y \t\tbzip2 \t\tcurl \t\tgcc \t\tgnupg dirmngr \t\tmake \t\t\t\tbc \t\tcpio \t\tdpkg-dev \t\tg++ \t\tpatch \t\tperl \t\tpython \t\trsync \t\tunzip \t\twget \t&& rm -rf /var/lib/apt/lists/*",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys AB07D806D2CE741FB886EE50B025BA8B59C36319",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "BUILDROOT_VERSION",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "2019.05",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \ttarball=\"buildroot-${BUILDROOT_VERSION}.tar.bz2\"; \tcurl -fL -o buildroot.tar.bz2 \"https://buildroot.org/downloads/$tarball\"; \tcurl -fL -o buildroot.tar.bz2.sign \"https://buildroot.org/downloads/$tarball.sign\"; \tgpg --batch --decrypt --output buildroot.tar.bz2.txt buildroot.tar.bz2.sign; \tawk '$1 == \"SHA1:\" && $2 ~ /^[0-9a-f]+$/ && $3 == \"'\"$tarball\"'\" { print $2, \"*buildroot.tar.bz2\" }' buildroot.tar.bz2.txt > buildroot.tar.bz2.sha1; \ttest -s buildroot.tar.bz2.sha1; \tsha1sum -c buildroot.tar.bz2.sha1; \tmkdir -p /usr/src/buildroot; \ttar -xf buildroot.tar.bz2 -C /usr/src/buildroot --strip-components 1; \trm buildroot.tar.bz2*",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \t\tcd /usr/src/buildroot; \t\tsetConfs=' \t\tBR2_STATIC_LIBS=y \t\tBR2_TOOLCHAIN_BUILDROOT_UCLIBC=y \t\tBR2_TOOLCHAIN_BUILDROOT_WCHAR=y \t'; \t\tunsetConfs=' \t\tBR2_SHARED_LIBS \t'; \t\tdpkgArch=\"$(dpkg --print-architecture)\"; \tcase \"$dpkgArch\" in \t\tamd64) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_x86_64=y \t\t\t\"; \t\t\t;; \t\t\t\t\tarm64) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_aarch64=y \t\t\t\"; \t\t\t;; \t\t\t\t\tarmel) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_arm=y \t\t\t\tBR2_arm926t=y \t\t\t\tBR2_ARM_EABI=y \t\t\t\tBR2_ARM_INSTRUCTIONS_THUMB=y \t\t\t\tBR2_ARM_SOFT_FLOAT=y \t\t\t\"; \t\t\t;; \t\t\t\t\tarmhf) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_arm=y \t\t\t\tBR2_cortex_a9=y \t\t\t\tBR2_ARM_EABIHF=y \t\t\t\tBR2_ARM_ENABLE_VFP=y \t\t\t\tBR2_ARM_FPU_VFPV3D16=y \t\t\t\tBR2_ARM_INSTRUCTIONS_THUMB2=y \t\t\t\"; \t\t\tunsetConfs=\"$unsetConfs BR2_ARM_SOFT_FLOAT\"; \t\t\t;; \t\t\t\t\ti386) \t\t\tsetConfs=\"$setConfs \t\t\t\tBR2_i386=y \t\t\t\"; \t\t\t;; \t\t\t\t\t\t\t\t\t\t\t*) \t\t\techo >&2 \"error: unsupported architecture '$dpkgArch'!\"; \t\t\texit 1; \t\t\t;; \tesac; \tif [ \"$dpkgArch\" != 'i386' ]; then \t\tunsetConfs=\"$unsetConfs BR2_i386\"; \tfi; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \tmake -C /usr/src/buildroot HOST_GMP_CONF_OPTS=\"--build='\"$gnuArch\"'\" -j \"$(nproc)\" toolchain",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "PATH",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "/usr/src/buildroot/output/host/usr/bin:$PATH",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-ENV",
        "children": [
            {
                "type": "DOCKER-NAME",
                "value": "BUSYBOX_VERSION",
                "children": []
            },
            {
                "type": "DOCKER-LITERAL",
                "value": "1.31.0",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \ttarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\"; \tcurl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\"; \tcurl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\"; \tgpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2; \tmkdir -p /usr/src/busybox; \ttar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1; \trm busybox.tar.bz2*",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-WORKDIR",
        "children": [
            {
                "type": "DOCKER-PATH",
                "value": "/usr/src/busybox",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \t\tsetConfs=' \t\tCONFIG_AR=y \t\tCONFIG_FEATURE_AR_CREATE=y \t\tCONFIG_FEATURE_AR_LONG_FILENAMES=y \t\tCONFIG_LAST_SUPPORTED_WCHAR=0 \t\tCONFIG_STATIC=y \t'; \t\tunsetConfs=' \t\tCONFIG_FEATURE_SYNC_FANCY \t'; \t\tmake defconfig; \t\tfor conf in $unsetConfs; do \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!# $conf is not set!\" \t\t\t.config; \tdone; \t\tfor confV in $setConfs; do \t\tconf=\"${confV%=*}\"; \t\tsed -i \t\t\t-e \"s!^$conf=.*\\$!$confV!\" \t\t\t-e \"s!^# $conf is not set\\$!$confV!\" \t\t\t.config; \t\tif ! grep -q \"^$confV\\$\" .config; then \t\t\techo \"$confV\" >> .config; \t\tfi; \tdone; \t\tmake oldconfig; \t\tfor conf in $unsetConfs; do \t\t! grep -q \"^$conf=\" .config; \tdone; \tfor confV in $setConfs; do \t\tgrep -q \"^$confV\\$\" .config; \tdone;",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex \t&& make -j \"$(nproc)\" \t\tCROSS_COMPILE=\"$(basename /usr/src/buildroot/output/host/usr/*-buildroot-linux-uclibc*)-\" \t\tbusybox \t&& ./busybox --help \t&& mkdir -p rootfs/bin \t&& ln -vL busybox rootfs/bin/ \t\t&& ln -vL ../buildroot/output/target/usr/bin/getconf rootfs/bin/ \t\t&& chroot rootfs /bin/getconf _NPROCESSORS_ONLN \t\t&& chroot rootfs /bin/busybox --install /bin",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \tmkdir -p rootfs/etc; \tfor f in passwd shadow group; do \t\tln -vL \t\t\t\"../buildroot/system/skeleton/etc/$f\" \t\t\t\"rootfs/etc/$f\"; \tdone; \tgrep -E '^root::' rootfs/etc/shadow; \tsed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow; \tgrep -E '^root:[*]:' rootfs/etc/shadow; \tawk ' \t\t!/^#/ { \t\t\tif ($2 != \"d\" && $2 != \"f\") { \t\t\t\tprintf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; \t\t\t\texit 1; \t\t\t} \t\t\tsub(/^\\/?/, \"rootfs/\", $1); \t\t\tif ($2 == \"d\") { \t\t\t\tprintf \"mkdir -p %s\\n\", $1; \t\t\t} \t\t\tprintf \"chmod %s %s\\n\", $3, $1; \t\t} \t' ../buildroot/system/device_table.txt | bash -Eeuo pipefail -x",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex \t&& cd rootfs \t&& for userHome in $(awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd); do \t\tuser=\"${userHome%%=*}\"; \t\thome=\"${userHome#*=}\"; \t\thome=\"./${home#/}\"; \t\tif [ ! -d \"$home\" ]; then \t\t\tmkdir -p \"$home\"; \t\t\tchown \"$user\" \"$home\"; \t\t\tchmod 755 \"$home\"; \t\tfi; \tdone",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "chroot rootfs /bin/sh -xec 'true'",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "set -ex; \tln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime; \t[ \"$(chroot rootfs date +%Z)\" = 'UTC' ]",
                "children": []
            }
        ]
    },
    {
        "type": "DOCKER-RUN",
        "children": [
            {
                "type": "MAYBE-BASH",
                "value": "cp -L /etc/resolv.conf rootfs/etc/ \t&& chroot rootfs /bin/sh -xec 'nslookup google.com' \t&& rm rootfs/etc/resolv.conf",
                "children": []
            }
        ]
    }
]